import java.util.*;

public class Test {
	public int divide(int dividend, int divisor) {
        if(dividend == 0) return 0;
        if(divisor == 0 || dividend < divisor) return 0;
        boolean neg = dividend < 0 != divisor < 0;
        long ldividend = Math.abs((long)dividend);
        long ldivisor = Math.abs((long)divisor);
        
        long res = divideLong(ldividend, ldivisor);
        return res > Integer.MAX_VALUE? Integer.MAX_VALUE : (neg? -(int)res : (int)res);
    }
    
    private long divideLong(long dividend, long divisor) {
        if(dividend < divisor) return 0;
        boolean neg = dividend < 0 != divisor < 0;
        long sum = divisor;
        long res = 1;
        // if(dividend < 0) dividend  = -dividend;
        // if(divisor < 0) divisor = -divisor;
        if(divisor == dividend) return neg? -1: 1;
        while(sum+sum <= dividend) {
            res+= res;
            sum += sum;
        }
        return neg? -res - divideLong(dividend - sum, divisor) : res + divideLong(dividend - sum, divisor);
    }
    
    public static void main(String[] arug) {

    	int[][] a = new int[][]{{1,0,2,0,1},{0,0,0,0,0},{0,0,1,0,0}};
    	int[] c = new int[]{1, -1};
    	//Test.shortestDistance(a);
    	 Test b = new Test();
    	 int res = b.divide(-1,1);


    }
}