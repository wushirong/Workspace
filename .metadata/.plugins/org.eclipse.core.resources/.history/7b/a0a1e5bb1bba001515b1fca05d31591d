import java.util.*;

public class Test {
	public boolean wordPatternMatch(String pattern, String str) {
        if(pattern.length() == 0 && str.length() == 0) return true;
        if(pattern == null || pattern.length() == 0 || str == null || str.length() == 0) return false;
        HashMap<Character, String> map = new HashMap<Character, String>();
        HashSet<String> set = new HashSet<String>();
        
        return helper(map, set, pattern, str);
    }
    
	private boolean helper(HashMap<Character, String> map, HashSet<String> set, String pattern, String str) {
        if(pattern.length() == 0 && str.length() == 0) return true;
        else if(pattern.length() == 0 || str.length() == 0) return false;
        else if(map.containsKey(pattern.charAt(0))) {
            if(!str.startsWith(map.get(pattern.charAt(0)))) return false;
            else return helper(map, set, pattern.substring(1), str.substring(map.get(pattern.charAt(0)).length()));
        }
        else {
        	for(int i = 1; i <= str.length(); i++) {
                String value = str.substring(0, i);
                if(set.contains(value)) return false;
                set.add(value);
                map.put(pattern.charAt(0), value);
                if(helper(map, set, pattern.substring(1), str.substring(i))) return true ;
                else map.remove(pattern.charAt(0));
            }
        }
        return false;
    }
    
    public static void main(String[] arug) {

    	int[][] a = new int[][]{{1,0,2,0,1},{0,0,0,0,0},{0,0,1,0,0}};
    	int[] c = new int[]{1, -1};
    	//Test.shortestDistance(a);
    	 Test b = new Test();
    	 b.wordPatternMatch("ab" ,"aa");


    }
}