package wordnet;
import java.util.*;
import java.lang.*;
import algs4.jar;
public class WordNet {
	private SAP sap;
	private Digraph G;
	private ArrayList<Queue<String>> nouns;
	private HashMap<String, Bag<Integer>> hashMap;

	// constructor takes the name of the two input files
	   public WordNet(String synsets, String hypernyms) {
		   String[] splitS = synsets.split(",");
		   String[] splitH = synsets.split(",");
		   int synsetid = Integer.parseInt(splitS[0]);
		   String synset = splitS[1];
		   String definition = splitS[2];
		   String[] hypernym = Arrays.copyOfRange(splitH, 1, splitH.length);
	   }

	   // returns all WordNet nouns
	   public Iterable<String> nouns() {
		   
	   }

	   // is the word a WordNet noun?
	   public boolean isNoun(String word) {
		   
	   }

	   // distance between nounA and nounB (defined below)
	   public int distance(String nounA, String nounB) {
		   
	   }

	   // a synset (second field of synsets.txt) that is the common ancestor of nounA and nounB
	   // in a shortest ancestral path (defined below)
	   public String sap(String nounA, String nounB) throws Exception{
		   if(nounA == null || nounB == null) throw new NullPointerException();
	   }

	   // do unit testing of this class
	   public static void main(String[] args) {
		   
	   }
}
