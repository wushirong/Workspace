/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_magc_jni_Missile */

#ifndef _Included_com_magc_jni_Missile
#define _Included_com_magc_jni_Missile
#ifdef __cplusplus
#include <iostream>
extern "C" {
#endif
#ifdef __cplusplus


	class com_magc_jni_Missile
	{
	public:
		com_magc_jni_Missile(int x, int y, Tank.Direction dir, bool good, TankClient tc) {
			this.x = x;
			this.y = y;
			this.dir = dir;
			this.good = good;
			this.tc = tc;
		};
		~com_magc_jni_Missile() {
			delete this;
		};
		int x;
		int y;
		static int radious = 10;
		static int XSPEED = 10;
		static int YSPEED = 10;

		Tank.Direction dir;

		void move() {
			switch(dir) {
				case L;
					x -= XSPEED;
					break;
				case R;
					x += XSPEED;
					break;
				case U;
					y -= YSPEED;
					break;
				case D:
					 y += YSPEED;
					 break;
				 case UL:
					 y -= YSPEED;
					 x -= XSPEED;
					 break;
				 case UR:
					 y -= YSPEED;
					 x += XSPEED;
					 break;
				 case DL:
					 y += YSPEED;
					 x -= XSPEED;
					 break;
				 case DR:
					 y += YSPEED;
					 x += XSPEED;
					 break;
				 case STOP:
					 break;
			}
			if(x < 0 || y < 0 || x > TankClient.GAME_WIDTH || y > TankClient.GAME_HEIGHT) {
				live = false;
				~com_magc_jni_Missile();
			}
		}

		
		bool hitTank(Tank t) {
			if(this.live && this.getRect().intersects(t.getRect()) && t.isLive() && this.good != t.isGood()) {
				t.setLive = false;
				Explode e = new Explode(x, y, tc);
				tc.explodes.add(e);
				return true;
			}
		}

		bool hitTanks() {
			for(int i = 0; i < tank.size(); i++) {
				if(hitTank(tank.get(i))) return true;
			}
			return false;
		}

		bool isLive() {
			return live;
		}
	private:
		TankClient tc;
		bool live = true;
		bool good;
		
	};
}
#endif
#endif
